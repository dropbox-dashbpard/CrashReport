/*
 * The MIT License (MIT)
 * Copyright (c) 2014 He Xiaocong (xiaocong@gmail.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
 * OR OTHER DEALINGS IN THE SOFTWARE.
 */

apply plugin: 'com.android.application'

def getBuildId() {
    def buildPropsFile = file('build.properties')
    def buildProps = new Properties()
    buildProps.load(new FileInputStream(buildPropsFile))

    def versionCode = 1
    if (buildProps.getProperty('BUILD_ID')) {
        versionCode = buildProps.getProperty('BUILD_ID').toInteger() + 1
    }

    buildProps['BUILD_ID']=versionCode.toString()
    buildProps.store(buildPropsFile.newWriter(), null)

    return versionCode
}

def getProdVersionName(buildId) {
    def date = new Date()
    def version = (date.year % 100) * 10000 + (date.month + 1) * 100 + date.date
    return String.format("%d.%d", version, buildId)
}


android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"
    lintOptions {
        abortOnError false
    }

    def config = new Properties()
    config.load(file('config.properties').newDataInputStream())

    defaultConfig {
        applicationId "org.tecrash.crashreport"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        manifestPlaceholders = [
            DROPBOX_APPKEY: config.getProperty("dropbox.appkey"),
            DROPBOX_DEVKEY: config.getProperty("dropbox.devkey"),
            DROPBOX_REPORT_URL: config.getProperty("dropbox.report.url"),
            DROPBOX_REPORT_DEVURL: config.getProperty("dropbox.report.devurl"),
            DROPBOX_REPORT_PROPERTIES: config.getProperty("dropbox.report.properties")
        ]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        def buildId = getBuildId()

        prod {
            applicationId config.getProperty("app.id")
            versionCode buildId
            versionName getProdVersionName(buildId)
        }
        dev {
            applicationId 'org.dev'
            versionCode buildId
            versionName getProdVersionName(buildId)
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-v4:23.1.1'
    compile 'com.path:android-priority-jobqueue:1.1.2'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.5.0'
}

apply plugin: 'findbugs'

task findbugs(type: FindBugs) {
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/prod/debug')
    source = fileTree('src')
    classpath = files()
    effort = 'max'
    reports {

        xml.enabled = false
        html.enabled = true
    }
}
